package thyscom.duelist;

import java.util.Calendar;
import javax.swing.ActionMap;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import org.joda.time.DateTime;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;

/**
 * Displays a view of due tasks
 * @author thys
 */
@ConvertAsProperties(dtd = "-//thyscom.duelist//DueList//EN",
autostore = false)
@TopComponent.Description(preferredID = "DueListTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "thyscom.duelist.DueListTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DueListAction",
preferredID = "DueListTopComponent")
public final class DueListTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager explorerManager;
    private Lookup lookup;

    public DueListTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DueListTopComponent.class, "CTL_DueListTopComponent"));
        setToolTipText(NbBundle.getMessage(DueListTopComponent.class, "HINT_DueListTopComponent"));

        setupSpinner();
        setExplorerManager();
        addChildren();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dueScrollPane = new ListView();
        jLabel1 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        thisWeekBtn = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DueListTopComponent.class, "DueListTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(thisWeekBtn, org.openide.util.NbBundle.getMessage(DueListTopComponent.class, "DueListTopComponent.thisWeekBtn.text")); // NOI18N
        thisWeekBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thisWeekBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dueScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(thisWeekBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dueScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(thisWeekBtn)
                            .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reset to this week
     * @param evt 
     */
    private void thisWeekBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thisWeekBtnActionPerformed
        DateTime now = new DateTime();
        int week = now.getWeekOfWeekyear();
        spinner.setValue((Integer) week);
    }//GEN-LAST:event_thisWeekBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane dueScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner spinner;
    private javax.swing.JButton thisWeekBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private void setExplorerManager() {
        explorerManager = new ExplorerManager();
        ActionMap am = getActionMap();
        // InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        lookup = ExplorerUtils.createLookup(explorerManager, am);
        associateLookup(lookup);
    }

    private void setupSpinner() {
        DateTime now = new DateTime();
        int week = now.getWeekOfWeekyear();
        SpinnerModel model = new SpinnerNumberModel(week, 1, 52, 1);
        spinner.setModel(model);
    }

    // 
    private void addChildren() {
        Children children = new TaskChildren(spinner);
        Node root = new AbstractNode(children);
        explorerManager.setRootContext(root);
        explorerManager.getRootContext().setDisplayName("Due Tasks");

    }
}
